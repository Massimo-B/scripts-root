#!/usr/bin/env bash

this_basename="${0##*/}"

usage() {
    cat <<EOF
This is $this_basename

Usage: $this_basename [OPTIONS] <target snapshot> <sibling snapshots>

Description:
Defragmentation of a <target snapshot> (btrfs RO snapshot) without modification or breaking parent relations, applying defragmentation to all <sibling snapshots>

Example:
$this_basename /mnt/data/snapshots/mdesk/home/home.20250725T072510+0200/ /mnt/data/snapshots/mdesk/home/home.*

Options:
    -h, --help      Show this help
    -n, --dry-run   Perform a trial run with no changes made
    -d, --debug     Debugging mode
    
Requires: duperemove (for btrfs-extent-same), btrfs-progs, coreutils
    
EOF
}

cleanup() {
    rm -frv "${defragdir_tmp}" || {
        echo "Failed to remove ${defragdir_tmp}"
        exit 1
    }
}

do_cmd() {
    if [[ -n "${opt_dryrun}" ]]; then
        printf '[DRY-RUN] %q \n'  "$@"
    else
        "$@" || {
            echo "Command failed: $*"
            exit 1
        }
    fi
}

### Requirement checks:
if (( ${BASH_VERSINFO[0]} < 4 )); then
    echo "This script needs at least bash version 4"
    exit 1
fi

type -p btrfs-extent-same >/dev/null || {
    echo "btrfs-extent-same not found, install package duperemove"
    exit 1
}
type -p btrfs >/dev/null || {
    echo "btrfs not found, install package btrfs-progs"
    exit 1
}
type -p mktemp >/dev/null || {
    echo "mktemp not found, from package coreutils"
    exit 1
}

### Parsing ARGS:
while [[ $1 == -* ]]; do
    case "$1" in
        -v|--verbose)   opt_verbose=1;              shift;;
        -n|--dry-run)   opt_dryrun=1;               shift;;
        -d|--debug)     opt_debug=1;                shift;;
        -h|--help)      usage;                      exit 0;;
        -*) echo "invalid option: $1" 1>&2; usage;  exit 1;;
    esac
done

target_snapshot="${1}";shift
if [[ -z "${target_snapshot}" ]]; then
    echo "Missing <target snapshot>"
    usage
    exit 1
fi
sibling_snapshots=("${@}")
if [[ ${#sibling_snapshots[@]} -eq 0 ]]; then
    echo "Missing <sibling snapshots>"
    usage
    exit 1
fi

[[ -n "$opt_debug" ]] && set -x

defragdir_tmp="$(mktemp -d -p "$(dirname "${target_snapshot}")" "${this_basename}.XXXXXX")" || {
    echo "Failed to create temporary directory"
    exit 1
}

trap cleanup EXIT

### Verbose header:
if [[ -n "$opt_verbose" ]]; then
    [[ -n "${opt_dryrun}" ]] && echo "##### DRY RUN #####"
    printf "%-20s %s\n" "Target snapshot:" "$target_snapshot"

    if [[ ${#sibling_snapshots[@]} -gt 0 ]]; then
        printf "%-20s %s\n" "Sibling snapshots:" "- ${sibling_snapshots[0]}"
        for ((i = 1; i < ${#sibling_snapshots[@]}; i++)); do
            printf "%-20s %s\n" "" "- ${sibling_snapshots[i]}"
        done
    else
        printf "%-20s\n" "Sibling snapshots:"
    fi

    printf "%-20s %s\n\n" "Temporary defrag dir:" "$defragdir_tmp"
fi

### Checks:
if [[ ! -d "${target_snapshot}" ]]; then
    echo "Directory ${target_snapshot} does not exist or is not a directory"
    exit 1
fi

btrfs subvolume show "${target_snapshot}" | grep -qE "Flags:\s+readonly" > /dev/null || {
    echo "${target_snapshot} is not a RO snapshot"
    exit 1
}

new_sibling_snapshots=()

for sibling_snapshot in "${sibling_snapshots[@]}"; do
    # Remove target snapshot from siblings list:
    if [[ "${sibling_snapshot}" != "${target_snapshot}" || -n "$found" ]]; then
        new_sibling_snapshots+=("${sibling_snapshot}")
    else
        found=1
    fi
    if [[ ! -d "${sibling_snapshot}" ]]; then
        echo "Directory ${sibling_snapshot} does not exist or is not a directory"
        exit 1
    fi
    btrfs subvolume show "${sibling_snapshot}" | grep -qE "Flags:\s+readonly" > /dev/null || {
        echo "${sibling_snapshot} is not a RO snapshot"
        exit 1
    }
done
sibling_snapshots=("${new_sibling_snapshots}")

if [[ ! -w "${defragdir_tmp}" ]]; then
    echo "${defragdir_tmp} is not writable"
    exit 1
fi

### Temporary file:
defragfile="${defragdir_tmp}/defragged"

cd "${target_snapshot}" || {
    echo "Cannot go to directory ${target_snapshot}"
    exit 1
}

### Main loop:
while IFS= read -r -d '' target_file; do
    relpath="${target_file#./}"
    [[ -n "$opt_verbose" ]] && echo "##################### ${relpath}"
    if [[ -r "${target_file}" ]]; then
        do_cmd cp -f --reflink=always "${relpath}" "${defragfile}"
        do_cmd btrfs filesystem defragment -t 512M "${defragfile}"
        size="$(stat -c %s "${defragfile}")"
        echo "Size: ${size}"
        for sibling_snapshot in "${sibling_snapshots[@]}"; do
            sibling_file="${sibling_snapshot}/${relpath}"
            [[ -n "$opt_verbose" ]] && echo "Sibling file: ${sibling_file}"
            if [[ -r "${sibling_file}" ]]; then
                do_cmd btrfs-extent-same "$size" "${defragfile}" 0 "${sibling_file}" 0
            else
                [[ -n "$opt_verbose" ]] && echo "No sibling file found for snapshot ${sibling_snapshot}"
            fi
        done
    else
        [[ -n "$opt_verbose" ]] && echo "File is not readable: ${target_file}"
    fi
done < <(find . -type f -print0)

